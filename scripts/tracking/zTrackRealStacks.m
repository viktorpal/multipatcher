% format example: data = zeros(5,3); %
% dataOld = [694	520; ...
% 695.6446	520.6108;...
% 695.4128	520.4219;...
% 695.3647	520.7123;...
% 695.0311	520.5283;...
% 695.3889	519.779;...
% 696.5708	520.0012;...
% 697.6146	518.4636;...
% 699.313	518.7122...
% ];
data1 = [...
    694,520; ...
    685.3049,541.7095; ...
    685.0636,542.124; ...
    685.2287,541.2376; ...
    685.5624,541.2102; ...
    686.7843,541.0063; ...
    689.1039,540.3141; ...
    692.8174,540.0782; ...
    695.145,539.9936 ...
    ];

data2 = [...
    694,520; ...
    695.6446,520.6108; ...
    695.4128,520.4219; ...
    695.3647,520.7123; ...
    695.0311,520.5283; ...
    695.3889,519.779; ...
    696.5708,520.0012; ...
    697.6146,518.4636; ...
    699.313,518.7122 ...
    ];

data3 = [...
    694,520; ...
    690.9012,519.4988; ...
    690.8223,519.3841; ...
    690.8243,519.4282; ...
    691.1722,519.3849; ...
    690.9593,519.4442; ...
    691.165,519.0385; ...
    691.6218,519.332; ...
    692.9407,518.6414; ...
    695.8098,517.8357; ...
    700.3348,516.838; ...
    706.0616,514.9336; ...
    713.6497,512.546; ...
    720.4572,512.9252; ...
    722.3186,514.2609; ...
    724.0783,513.7001; ...
    726.7392,513.5753 ...
    ];

data4 = [...
    694,520; ...
    691.1224,521.2325; ...
    691.5661,520.781; ...
    691.7773,520.8019; ...
    692.8358,520.608; ...
    696.3747,520.5129; ...
    701.286,519.0579; ...
    704.0422,517.8788 ...
    ];

data = data2;
% imgFolder = '/home/koosk/data/data/autopatcher/ztracking-stacks_and_templates/1';
imgFolder = '/home/koosk/data/data/autopatcher/ztracking-stacks_and_templates/2';
% imgFolder = '/home/koosk/data/data/autopatcher/ztracking-stacks_and_templates/3';
% imgFolder = '/home/koosk/data/data/autopatcher/ztracking-stacks_and_templates/4';
diameter = 120*2+1;
corrZsameMultiplier = 0.95;
% corrZsameMultiplier = 1;
result = [];
%%
stacks = dir([imgFolder,'/*.tif']);
templatePath = dir([imgFolder,'/*template*']);
templatePath = [templatePath.folder, filesep, templatePath.name];
refImg = (im2double(imread(templatePath)));

% refImg = mat2gray(refImg);

assert(numel(stacks)==size(data,1), 'Data and number of stacks should match!');
xRef = 694;
yRef = 520;
result = [];zeros(numel(stacks),0);
for iStack = 1:numel(stacks)
    imgstack = ImageStack.load([imgFolder, filesep, stacks(iStack).name]);
    stack = imgstack.getStack();
    [sy,sx,sz] = size(stack);
    refSlice = round(sz/2);
    values = zeros(1,sz);
    windows = zeros([diameter,diameter,3]);
    for iz = 1:sz
        currentImage = (stack(:,:,iz));
%         currentImage = mat2gray(currentImage);
        xCurr = data(iStack,1);
        yCurr = data(iStack,2);
        [values(iz), wref, wcurr] = calculateZSimilarity(yRef, xRef, yCurr, xCurr, refImg, currentImage, floor(diameter/2));
        if iz == refSlice
            values(iz) = values(iz)*corrZsameMultiplier;
        end
        windows(:,:,iz) = wcurr;
    end
    
    figure,
    subplot(1,3,1),
    imshow(mat2gray(wref)),
    subplot(1,3,2),
    [~, minpos] = min(values,[],2);
    imshow(mat2gray(windows(:,:,minpos))),
    subplot(1,3,3),
    imshow(mat2gray(windows(:,:,refSlice))),
    drawnow
    
    result(iStack,:) = values; %#ok<SAGROW>
end
figure, plot(result'), legend('show')
[minval,bestZ] = min(result,[],2);
bestZ
